import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useLocation, useParams } from 'wouter';
import { format } from 'date-fns';
import { pl } from 'date-fns/locale';
import { CalendarIcon, ChevronLeft, Truck, Hammer, AlertTriangle, MapPin, Package, Calendar, User, Building, Clock, FileText, Loader2, X, Phone, ArrowRight, Info, RotateCw, CheckCircle2, Pencil, Check } from 'lucide-react';
import { Card, CardHeader, CardContent, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Calendar as CalendarComponent } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';
import { apiRequest } from '@/lib/queryClient';
import { useAuth } from '@/lib/auth';
import ClickableAddress from '@/components/ClickableAddress';
import PhotosSection from '@/components/PhotosSection';

// Komponent szczegółów zamówienia
export default function OrderDetails() {
  const { id } = useParams();
  const [, navigate] = useLocation();
  const orderId = Number(id);
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { user } = useAuth();
  
  // Stan dla zakładek
  const [activeTab, setActiveTab] = useState('installation');
  
  // Stany formularza
  const [installationStatus, setInstallationStatus] = useState<string>('');
  const [installationDate, setInstallationDate] = useState<Date | null>(null);
  const [installationNotes, setInstallationNotes] = useState<string>('');
  const [transportStatus, setTransportStatus] = useState<string>('');
  const [transportDate, setTransportDate] = useState<Date | null>(null);
  const [transportNotes, setTransportNotes] = useState<string>('');
  const [complaintDescription, setComplaintDescription] = useState<string>('');
  const [complaintResolution, setComplaintResolution] = useState<string>('');
  
  // Pobieranie danych zamówienia
  const { data: order, isLoading, isError, error } = useQuery({
    queryKey: ['/api/orders', orderId],
    enabled: !!orderId && !isNaN(orderId),
  });
  
  // Pobieranie firm instalacyjnych
  const { data: companies } = useQuery({
    queryKey: ['/api/companies'],
    enabled: !!user && (user.role === 'admin' || user.role === 'worker'),
  });
  
  // Pobieranie montażystów
  const { data: installers } = useQuery({
    queryKey: ['/api/installers'],
    enabled: !!user && (user.role === 'admin' || user.role === 'worker' || user.role === 'company'),
  });

  // Pobieranie transporterów
  const { data: transporters } = useQuery({
    queryKey: ['/api/transporters'],
    enabled: !!user && (user.role === 'admin' || user.role === 'worker' || user.role === 'company'),
  });
  
  // Ustawienie zakładki na podstawie statusu
  useEffect(() => {
    if (order) {
      if (order.installationStatus === 'Reklamacja') {
        setActiveTab('complaint');
      } else if (order.installerId || order.installationDate) {
        setActiveTab('installation');
      } else if (order.transporterId || order.transportDate) {
        setActiveTab('transport');
      }
      
      // Inicjalizacja stanów formularza
      setInstallationStatus(order.installationStatus || '');
      setInstallationDate(order.installationDate ? new Date(order.installationDate) : null);
      setInstallationNotes(order.installationNotes || '');
      setTransportStatus(order.transportStatus || '');
      setTransportDate(order.transportDate ? new Date(order.transportDate) : null);
      setTransportNotes(order.transportNotes || '');
      
      // Dla reklamacji
      if (order.complaintDescription) {
        setComplaintDescription(order.complaintDescription);
      }
      if (order.complaintResolution) {
        setComplaintResolution(order.complaintResolution);
      }
    }
  }, [order]);
  
  // Uprawnienia użytkownika
  const canEditInstallation = user?.role === 'admin' || 
                              user?.role === 'worker' || 
                              user?.role === 'installer' || 
                              (user?.role === 'company' && order?.companyId === user.companyId);
  
  const canEditTransport = user?.role === 'admin' || 
                           user?.role === 'worker' || 
                           user?.role === 'transporter' || 
                           (user?.role === 'company' && order?.companyId === user.companyId);
  
  const canAssignInstaller = user?.role === 'admin' || 
                             user?.role === 'worker' || 
                             (user?.role === 'company' && order?.companyId === user.companyId);
  
  const canAssignTransporter = user?.role === 'admin' || 
                               user?.role === 'worker' || 
                               (user?.role === 'company' && order?.companyId === user.companyId);
  
  const canAssignCompany = user?.role === 'admin' || user?.role === 'worker';
  
  const isOnePersonCompany = user?.role === 'company' && user.isOnePersonCompany;
  
  // Mutacja dla aktualizacji statusu instalacji
  const updateInstallationStatusMutation = useMutation({
    mutationFn: async () => {
      return apiRequest(`/api/orders/${orderId}/status`, 'PATCH', {
        installationStatus,
        installationDate,
        installationNotes
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/orders', orderId] });
      toast({
        title: "Zaktualizowano status montażu",
        description: "Status montażu został pomyślnie zaktualizowany",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Błąd",
        description: error.message || "Nie udało się zaktualizować statusu montażu",
        variant: "destructive",
      });
    }
  });
  
  // Mutacja dla aktualizacji statusu transportu
  const updateTransportStatusMutation = useMutation({
    mutationFn: async () => {
      return apiRequest(`/api/orders/${orderId}/transport-status`, 'PATCH', {
        transportStatus,
        transportDate,
        transportNotes
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/orders', orderId] });
      toast({
        title: "Zaktualizowano status transportu",
        description: "Status transportu został pomyślnie zaktualizowany",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Błąd",
        description: error.message || "Nie udało się zaktualizować statusu transportu",
        variant: "destructive",
      });
    }
  });
  
  // Mutacja dla aktualizacji reklamacji
  const updateComplaintMutation = useMutation({
    mutationFn: async () => {
      return apiRequest(`/api/orders/${orderId}/status`, 'PATCH', {
        installationStatus: 'Reklamacja',
        complaintDescription,
        complaintResolution
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/orders', orderId] });
      toast({
        title: "Zaktualizowano reklamację",
        description: "Informacje o reklamacji zostały pomyślnie zaktualizowane",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Błąd",
        description: error.message || "Nie udało się zaktualizować reklamacji",
        variant: "destructive",
      });
    }
  });
  
  // Mutacja dla przypisania firmy
  const assignCompanyMutation = useMutation({
    mutationFn: async (companyId: number) => {
      return apiRequest(`/api/orders/${orderId}/assign-company`, 'PATCH', {
        companyId
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/orders', orderId] });
      toast({
        title: "Przypisano firmę",
        description: "Firma została pomyślnie przypisana do zlecenia",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Błąd",
        description: error.message || "Nie udało się przypisać firmy",
        variant: "destructive",
      });
    }
  });
  
  // Mutacja dla przypisania montażysty
  const assignInstallerMutation = useMutation({
    mutationFn: async (installerId: number) => {
      return apiRequest(`/api/orders/${orderId}/assign-installer`, 'PATCH', {
        installerId
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/orders', orderId] });
      toast({
        title: "Przypisano montażystę",
        description: "Montażysta został pomyślnie przypisany do zlecenia",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Błąd",
        description: error.message || "Nie udało się przypisać montażysty",
        variant: "destructive",
      });
    }
  });
  
  // Mutacja dla przypisania transportera
  const assignTransporterMutation = useMutation({
    mutationFn: async (transporterId: number) => {
      return apiRequest(`/api/orders/${orderId}/assign-transporter`, 'PATCH', {
        transporterId
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/orders', orderId] });
      toast({
        title: "Przypisano transportera",
        description: "Transporter został pomyślnie przypisany do zlecenia",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Błąd",
        description: error.message || "Nie udało się przypisać transportera",
        variant: "destructive",
      });
    }
  });
  
  // Obsługa przycisku powrotu
  const handleGoBack = () => {
    navigate('/orders');
  };
  
  // Obsługa aktualizacji statusu instalacji
  const handleUpdateInstallationStatus = () => {
    updateInstallationStatusMutation.mutate();
  };
  
  // Obsługa aktualizacji statusu transportu
  const handleUpdateTransportStatus = () => {
    updateTransportStatusMutation.mutate();
  };
  
  // Obsługa aktualizacji reklamacji
  const handleUpdateComplaint = () => {
    updateComplaintMutation.mutate();
  };
  
  // Obsługa przypisania firmy
  const handleAssignCompany = (companyId: string) => {
    if (companyId) {
      assignCompanyMutation.mutate(Number(companyId));
    }
  };
  
  // Obsługa przypisania montażysty
  const handleAssignInstaller = (installerId: string) => {
    if (installerId) {
      assignInstallerMutation.mutate(Number(installerId));
    }
  };
  
  // Obsługa przypisania transportera
  const handleAssignTransporter = (transporterId: string) => {
    if (transporterId) {
      assignTransporterMutation.mutate(Number(transporterId));
    }
  };
  
  // Wyświetlanie stanów ładowania i błędów
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="ml-2">Ładowanie danych zamówienia...</span>
      </div>
    );
  }
  
  if (isError) {
    return (
      <Alert variant="destructive" className="max-w-3xl mx-auto mt-4">
        <AlertTitle>Błąd</AlertTitle>
        <AlertDescription>
          {(error as Error)?.message || "Nie udało się załadować danych zamówienia"}
        </AlertDescription>
      </Alert>
    );
  }
  
  if (!order) {
    return (
      <Alert variant="destructive" className="max-w-3xl mx-auto mt-4">
        <AlertTitle>Brak danych</AlertTitle>
        <AlertDescription>
          Nie znaleziono zamówienia o podanym identyfikatorze
        </AlertDescription>
      </Alert>
    );
  }
  
  // Główny widok komponentu
  return (
    <Card className="max-w-4xl mx-auto">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <div>
          <Button variant="ghost" size="sm" onClick={handleGoBack} className="mb-2">
            <ChevronLeft className="h-4 w-4 mr-1" />
            Powrót do zamówień
          </Button>
          <div className="flex items-center gap-2">
            <CardTitle>Zamówienie #{order.orderNumber || order.id}</CardTitle>
            <Badge className={cn(
              "ml-2",
              (order.installationStatus === 'Zakończone') ? "bg-green-100 text-green-800 hover:bg-green-100" :
              (order.installationStatus === 'W realizacji') ? "bg-blue-100 text-blue-800 hover:bg-blue-100" :
              (order.installationStatus === 'Zaplanowane') ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-100" :
              (order.installationStatus === 'Reklamacja') ? "bg-red-100 text-red-800 hover:bg-red-100" :
              "bg-gray-100 text-gray-800 hover:bg-gray-100"
            )}>
              {order.installationStatus || "Nowe"}
            </Badge>
            {order.transportStatus && (
              <Badge className={cn(
                "ml-2",
                (order.transportStatus === 'Dostarczono') ? "bg-green-100 text-green-800 hover:bg-green-100" :
                (order.transportStatus === 'W drodze') ? "bg-blue-100 text-blue-800 hover:bg-blue-100" :
                (order.transportStatus === 'Zaplanowane') ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-100" :
                "bg-gray-100 text-gray-800 hover:bg-gray-100"
              )}>
                Transport: {order.transportStatus}
              </Badge>
            )}
          </div>
          <CardDescription>
            {order.customer ? order.customer : "Brak danych klienta"}
            {order.customerPhone && (
              <span className="ml-2">
                <Phone className="h-3 w-3 inline mr-1" />
                {order.customerPhone}
              </span>
            )}
          </CardDescription>
        </div>
      </CardHeader>
      
      <Separator />
      
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <div className="px-6 pt-2">
          <TabsList className="grid w-full grid-cols-3">
            {/* Zakładka Montaż - widoczna dla wszystkich */}
            <TabsTrigger value="installation" className="data-[state=active]:bg-primary-50">
              <Hammer className="h-4 w-4 mr-2" />
              Montaż
            </TabsTrigger>
            
            {/* Zakładka Transport - widoczna dla wszystkich */}
            <TabsTrigger value="transport" className="data-[state=active]:bg-primary-50">
              <Truck className="h-4 w-4 mr-2" />
              Transport
            </TabsTrigger>
            
            {/* Zakładka Reklamacja - widoczna dla wszystkich */}
            <TabsTrigger value="complaint" className={`data-[state=active]:${(order.installationStatus || '') === 'Reklamacja' ? 'bg-red-50' : 'bg-primary-50'}`}>
              <AlertTriangle className={`h-4 w-4 mr-2 ${(order.installationStatus || '') === 'Reklamacja' ? 'text-red-500' : ''}`} />
              Reklamacja
            </TabsTrigger>
          </TabsList>
        </div>
        
        <CardContent className="p-6">
          {/* Zakładka Montaż */}
          <TabsContent value="installation" className="mt-0">
            <div className="grid md:grid-cols-1 gap-6">
              {/* Informacje dla montażysty */}
              <div className="mb-4">
                <h3 className="font-medium text-lg mb-2">Szczegóły montażu</h3>
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <dl className="space-y-4">
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Adres montażu</dt>
                        <dd className="mt-1">
                          <ClickableAddress 
                            address={order.installationAddress || ''} 
                            iconSize={18}
                          />
                        </dd>
                      </div>
                      
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Zakres usługi</dt>
                        <dd className="mt-1 flex items-center">
                          <Package className="h-4 w-4 mr-2 text-gray-400" />
                          <span>{order.serviceType}{order.withTransport ? ' + transport' : ''}</span>
                        </dd>
                      </div>
                      
                      {order.installationDate && (
                        <div>
                          <dt className="text-sm font-medium text-gray-500">Data montażu</dt>
                          <dd className="mt-1 flex items-center">
                            <Calendar className="h-4 w-4 mr-2 text-gray-400" />
                            <span>
                              {format(new Date(order.installationDate), 'EEEE, d MMMM yyyy', { locale: pl })}
                            </span>
                          </dd>
                        </div>
                      )}
                    </dl>
                  </div>
                  
                  <div>
                    <dl className="space-y-4">
                      {order.installerId && order.installerName && (
                        <div>
                          <dt className="text-sm font-medium text-gray-500">Montażysta</dt>
                          <dd className="mt-1 flex items-center">
                            <User className="h-4 w-4 mr-2 text-gray-400" />
                            <span>{order.installerName}</span>
                          </dd>
                        </div>
                      )}
                      
                      {order.companyId && order.companyName && (
                        <div>
                          <dt className="text-sm font-medium text-gray-500">Firma montażowa</dt>
                          <dd className="mt-1 flex items-center">
                            <Building className="h-4 w-4 mr-2 text-gray-400" />
                            <span>{order.companyName}</span>
                          </dd>
                        </div>
                      )}
                      
                      {order.installationNotes && (
                        <div>
                          <dt className="text-sm font-medium text-gray-500">Notatki montażowe</dt>
                          <dd className="mt-1 text-sm bg-gray-50 p-3 rounded border border-gray-100">
                            {order.installationNotes}
                          </dd>
                        </div>
                      )}
                    </dl>
                  </div>
                </div>
              </div>
              
              {/* Przypisanie firmy - dla admin i pracowników */}
              {canAssignCompany && !order.companyId && (
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-100 mb-4">
                  <h3 className="text-md font-medium mb-2 text-blue-800">Przypisz firmę montażową</h3>
                  <div className="flex items-center gap-2">
                    <Select 
                      onValueChange={handleAssignCompany}
                    >
                      <SelectTrigger className="w-full max-w-xs">
                        <SelectValue placeholder="Wybierz firmę" />
                      </SelectTrigger>
                      <SelectContent>
                        {companies && companies.map((company: any) => (
                          <SelectItem key={company.id} value={company.id.toString()}>
                            {company.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}
              
              {/* Przypisanie montażysty - dla firm i admina */}
              {canAssignInstaller && order.companyId && !order.installerId && (
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-100 mb-4">
                  <h3 className="text-md font-medium mb-2 text-blue-800">Przypisz montażystę</h3>
                  <div className="flex items-center gap-2">
                    <Select 
                      onValueChange={handleAssignInstaller}
                    >
                      <SelectTrigger className="w-full max-w-xs">
                        <SelectValue placeholder="Wybierz montażystę" />
                      </SelectTrigger>
                      <SelectContent>
                        {installers && installers
                          .filter((installer: any) => 
                            // Firmy widzą tylko swoich montażystów
                            user?.role !== 'company' || installer.companyId === user.companyId
                          )
                          .map((installer: any) => (
                            <SelectItem key={installer.id} value={installer.id.toString()}>
                              {installer.firstName} {installer.lastName}
                            </SelectItem>
                          ))
                        }
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}
              
              {/* Panel edycji statusu montażu */}
              {canEditInstallation && (order.installerId || isOnePersonCompany) && (
                <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                  <h3 className="text-md font-medium mb-4">Aktualizacja statusu montażu</h3>
                  
                  <div className="grid md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <label className="text-sm font-medium mb-1 block">Status montażu</label>
                      <Select 
                        value={installationStatus} 
                        onValueChange={setInstallationStatus}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Wybierz status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Nowe">Nowe</SelectItem>
                          <SelectItem value="Zaplanowane">Zaplanowane</SelectItem>
                          <SelectItem value="W realizacji">W realizacji</SelectItem>
                          <SelectItem value="Zakończone">Zakończone</SelectItem>
                          <SelectItem value="Reklamacja">Reklamacja</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <label className="text-sm font-medium mb-1 block">Data montażu</label>
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            variant="outline"
                            className="w-full justify-start text-left font-normal"
                          >
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {installationDate ? (
                              format(installationDate, 'PPP', { locale: pl })
                            ) : (
                              <span>Wybierz datę</span>
                            )}
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0">
                          <CalendarComponent
                            mode="single"
                            selected={installationDate || undefined}
                            onSelect={(date) => setInstallationDate(date)}
                            disabled={(date) => date < new Date('1900-01-01')}
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <label className="text-sm font-medium mb-1 block">Notatki montażowe</label>
                    <Textarea 
                      value={installationNotes || ''}
                      onChange={(e) => setInstallationNotes(e.target.value)}
                      placeholder="Dodaj notatki dotyczące montażu"
                      className="min-h-[100px]"
                    />
                  </div>
                  
                  <div className="flex justify-end">
                    <Button
                      onClick={handleUpdateInstallationStatus}
                      disabled={updateInstallationStatusMutation.isPending}
                    >
                      {updateInstallationStatusMutation.isPending ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Aktualizowanie...
                        </>
                      ) : (
                        <>
                          <RotateCw className="mr-2 h-4 w-4" />
                          Aktualizuj status montażu
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              )}
              
              {/* Zdjęcia */}
              <PhotosSection orderId={orderId} />
            </div>
          </TabsContent>
          
          {/* Transport Tab */}
          <TabsContent value="transport" className="mt-0">
            <div className="space-y-6">
              {/* Dane transportu */}
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <h3 className="font-medium text-lg mb-4">Szczegóły transportu</h3>
                  <dl className="space-y-4">
                    {order.installationAddress && (
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Adres dostawy</dt>
                        <dd className="mt-1">
                          <ClickableAddress 
                            address={order.installationAddress || ''} 
                            iconSize={18}
                          />
                        </dd>
                      </div>
                    )}
                    
                    {order.transportDate && (
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Data transportu</dt>
                        <dd className="mt-1 flex items-center">
                          <Calendar className="h-4 w-4 mr-2 text-gray-400" />
                          <span>
                            {format(new Date(order.transportDate), 'EEEE, d MMMM yyyy', { locale: pl })}
                          </span>
                        </dd>
                      </div>
                    )}
                    
                    {order.transportNotes && (
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Notatki transportowe</dt>
                        <dd className="mt-1 text-sm bg-gray-50 p-3 rounded border border-gray-100">
                          {order.transportNotes}
                        </dd>
                      </div>
                    )}
                  </dl>
                </div>
                
                <div>
                  <h3 className="font-medium text-lg mb-4">Status transportu</h3>
                  <dl className="space-y-4">
                    {order.transporterId && order.transporterName && (
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Transporter</dt>
                        <dd className="mt-1 flex items-center">
                          <User className="h-4 w-4 mr-2 text-gray-400" />
                          <span>{order.transporterName}</span>
                        </dd>
                      </div>
                    )}
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Status transportu</dt>
                      <dd className="mt-1">
                        <Badge className={cn(
                          (order.transportStatus === 'Dostarczono') ? "bg-green-100 text-green-800" :
                          (order.transportStatus === 'W drodze') ? "bg-blue-100 text-blue-800" :
                          (order.transportStatus === 'Zaplanowane') ? "bg-yellow-100 text-yellow-800" :
                          "bg-gray-100 text-gray-800"
                        )}>
                          {order.transportStatus || "Nie określono"}
                        </Badge>
                      </dd>
                    </div>
                  </dl>
                </div>
              </div>
              
              {/* Sekcja przypisania transportera */}
              {canAssignTransporter && order.withTransport && !order.transporterId && (
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-100 mb-4">
                  <h3 className="text-md font-medium mb-2 text-blue-800">Przypisz transportera</h3>
                  <div className="flex items-center gap-2">
                    <Select 
                      onValueChange={handleAssignTransporter}
                    >
                      <SelectTrigger className="w-full max-w-xs">
                        <SelectValue placeholder="Wybierz transportera" />
                      </SelectTrigger>
                      <SelectContent>
                        {transporters && transporters
                          .filter((transporter: any) => 
                            // Firmy widzą tylko swoich transporterów
                            user?.role !== 'company' || transporter.companyId === user.companyId
                          )
                          .map((transporter: any) => (
                            <SelectItem key={transporter.id} value={transporter.id.toString()}>
                              {transporter.firstName} {transporter.lastName}
                            </SelectItem>
                          ))
                        }
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}
              
              {/* Panel edycji statusu transportu */}
              {canEditTransport && order.withTransport && (order.transporterId || isOnePersonCompany) && (
                <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                  <h3 className="text-md font-medium mb-4">Aktualizacja statusu transportu</h3>
                  
                  <div className="grid md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <label className="text-sm font-medium mb-1 block">Status transportu</label>
                      <Select 
                        value={transportStatus} 
                        onValueChange={setTransportStatus}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Wybierz status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Nowe">Nowe</SelectItem>
                          <SelectItem value="Zaplanowane">Zaplanowane</SelectItem>
                          <SelectItem value="W drodze">W drodze</SelectItem>
                          <SelectItem value="Dostarczono">Dostarczono</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <label className="text-sm font-medium mb-1 block">Data transportu</label>
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            variant="outline"
                            className="w-full justify-start text-left font-normal"
                          >
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {transportDate ? (
                              format(transportDate, 'PPP', { locale: pl })
                            ) : (
                              <span>Wybierz datę</span>
                            )}
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0">
                          <CalendarComponent
                            mode="single"
                            selected={transportDate || undefined}
                            onSelect={(date) => setTransportDate(date)}
                            disabled={(date) => date < new Date('1900-01-01')}
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <label className="text-sm font-medium mb-1 block">Notatki transportowe</label>
                    <Textarea 
                      value={transportNotes || ''}
                      onChange={(e) => setTransportNotes(e.target.value)}
                      placeholder="Dodaj notatki dotyczące transportu"
                      className="min-h-[100px]"
                    />
                  </div>
                  
                  <div className="flex justify-end">
                    <Button
                      onClick={handleUpdateTransportStatus}
                      disabled={updateTransportStatusMutation.isPending}
                    >
                      {updateTransportStatusMutation.isPending ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Aktualizowanie...
                        </>
                      ) : (
                        <>
                          <RotateCw className="mr-2 h-4 w-4" />
                          Aktualizuj status transportu
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              )}
              
              {/* Informacja o braku transportu */}
              {!order.withTransport && (
                <Alert className="mt-4">
                  <Info className="h-4 w-4" />
                  <AlertTitle>Brak transportu</AlertTitle>
                  <AlertDescription>
                    To zamówienie nie obejmuje usługi transportu.
                  </AlertDescription>
                </Alert>
              )}
            </div>
          </TabsContent>
          
          {/* Complaint Tab */}
          <TabsContent value="complaint" className="mt-0">
            <div className="space-y-6">
              {order.installationStatus === 'Reklamacja' ? (
                <>
                  <div className="bg-red-50 p-4 rounded-lg border border-red-100">
                    <div className="flex items-center mb-2">
                      <AlertTriangle className="h-5 w-5 text-red-500 mr-2" />
                      <h3 className="text-lg font-medium text-red-800">Szczegóły reklamacji</h3>
                    </div>
                    
                    <div className="space-y-4 mt-4">
                      {complaintDescription && (
                        <div>
                          <h4 className="text-sm font-medium text-gray-700 mb-1">Opis reklamacji</h4>
                          <div className="bg-white p-3 rounded border border-red-100 text-sm">
                            {complaintDescription}
                          </div>
                        </div>
                      )}
                      
                      {complaintResolution && (
                        <div>
                          <h4 className="text-sm font-medium text-gray-700 mb-1">Rozwiązanie reklamacji</h4>
                          <div className="bg-white p-3 rounded border border-red-100 text-sm">
                            {complaintResolution}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  {/* Edycja reklamacji */}
                  {canEditInstallation && (
                    <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                      <h3 className="text-md font-medium mb-4">Aktualizacja danych reklamacji</h3>
                      
                      <div className="space-y-4">
                        <div>
                          <label className="text-sm font-medium mb-1 block">Opis reklamacji</label>
                          <Textarea 
                            value={complaintDescription}
                            onChange={(e) => setComplaintDescription(e.target.value)}
                            placeholder="Opisz przyczynę reklamacji"
                            className="min-h-[100px]"
                          />
                        </div>
                        
                        <div>
                          <label className="text-sm font-medium mb-1 block">Rozwiązanie reklamacji</label>
                          <Textarea 
                            value={complaintResolution}
                            onChange={(e) => setComplaintResolution(e.target.value)}
                            placeholder="Opisz rozwiązanie reklamacji (opcjonalnie)"
                            className="min-h-[100px]"
                          />
                        </div>
                      </div>
                      
                      <div className="flex justify-end mt-4">
                        <Button
                          onClick={handleUpdateComplaint}
                          disabled={updateComplaintMutation.isPending}
                        >
                          {updateComplaintMutation.isPending ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Aktualizowanie...
                            </>
                          ) : (
                            <>
                              <RotateCw className="mr-2 h-4 w-4" />
                              Aktualizuj dane reklamacji
                            </>
                          )}
                        </Button>
                      </div>
                    </div>
                  )}
                </>
              ) : (
                /* Zgłoszenie reklamacji */
                canEditInstallation && (
                  <div className="bg-red-50 p-6 rounded-lg border border-red-100">
                    <div className="flex items-center mb-4">
                      <AlertTriangle className="h-6 w-6 text-red-500 mr-2" />
                      <h3 className="text-lg font-medium text-red-800">Zgłoszenie reklamacji</h3>
                    </div>
                    
                    <p className="text-sm text-gray-700 mb-6">
                      Aby zgłosić reklamację, opisz jej przyczynę poniżej i kliknij przycisk "Zgłoś reklamację".
                      Spowoduje to zmianę statusu zlecenia na "Reklamacja".
                    </p>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="text-sm font-medium mb-1 block">Opis reklamacji</label>
                        <Textarea 
                          value={complaintDescription}
                          onChange={(e) => setComplaintDescription(e.target.value)}
                          placeholder="Opisz przyczynę reklamacji"
                          className="min-h-[100px]"
                        />
                      </div>
                    </div>
                    
                    <div className="flex justify-end mt-4">
                      <Button
                        variant="destructive"
                        onClick={handleUpdateComplaint}
                        disabled={updateComplaintMutation.isPending || !complaintDescription}
                      >
                        {updateComplaintMutation.isPending ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Przetwarzanie...
                          </>
                        ) : (
                          <>
                            <AlertTriangle className="mr-2 h-4 w-4" />
                            Zgłoś reklamację
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                )
              )}
            </div>
          </TabsContent>
        </CardContent>
      </Tabs>
    </Card>
  );
}