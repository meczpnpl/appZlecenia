                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Zapisywanie...
                          </div>
                        ) : (
                          <div className="flex items-center">
                            <MessageCircle className="h-4 w-4 mr-2" />
                            Dodaj
                          </div>
                        )}
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </TabsContent>
          
          {/* Finances Tab - For admin, workers and installer-company owners */}
          {canSeeFinancials && (
            <TabsContent value="finances" className="mt-0">
              <div className="space-y-6">
                {/* Wartości finansowe - widoczne tylko dla admin i worker */}
                {(user?.role === 'admin' || user?.role === 'worker') && (
                  <>
                    <div className="grid md:grid-cols-3 gap-6">
                      <div className="bg-gray-50 rounded-md p-4 border border-gray-200">
                        <h4 className="text-sm font-medium text-gray-500 mb-1">Wartość zlecenia netto</h4>
                        <p className="text-2xl font-bold">{order.orderValue?.toFixed(2) || '0.00'} zł</p>
                      </div>
                      
                      <div className="bg-gray-50 rounded-md p-4 border border-gray-200">
                        <h4 className="text-sm font-medium text-gray-500 mb-1">Wartość magazynowa</h4>
                        <p className="text-2xl font-bold">{order.warehouseValue?.toFixed(2) || '0.00'} zł</p>
                      </div>
                      
                      <div className="bg-gray-50 rounded-md p-4 border border-gray-200">
                        <h4 className="text-sm font-medium text-gray-500 mb-1">Koszt usługi</h4>
                        <p className="text-2xl font-bold">{order.serviceValue?.toFixed(2) || '0.00'} zł</p>
                      </div>
                    </div>
                    
                    <div className="bg-green-50 rounded-md p-4 border border-green-200">
                      <h4 className="text-sm font-medium text-green-700 mb-1">Zysk ze zlecenia</h4>
                      <p className="text-2xl font-bold text-green-700">
                        {((order.orderValue || 0) - (order.warehouseValue || 0) - (order.serviceValue || 0)).toFixed(2)} zł
                      </p>
                      <p className="text-xs text-green-600 mt-1">
                        Wyliczenie: Wartość zlecenia - Wartość wydania magazynowego - Koszty usługi
                      </p>
                    </div>
                  </>
                )}
                
                {/* Sekcja dokumentacji finansowej - TYLKO DLA uprawnionych użytkowników (admin, pracownicy, firma i montażysta-właściciel) */}
                <div className="mt-6">
                  <h3 className="font-medium text-lg mb-4">Dokumentacja finansowa</h3>
                  
                  <div className="space-y-4">
                    <div className="flex flex-col p-4 bg-gray-50 rounded-md border border-gray-200">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center">
                          <FileText className="h-5 w-5 mr-2 text-gray-400" />
                          <span className="font-medium">Faktura za usługę montażu</span>
                        </div>
                        
                        {canEditFinancialFields ? (
                          <div className="flex items-center gap-2">
                            <Checkbox 
                              id="invoice-issued-finance" 
                              checked={invoiceIssued}
                              onCheckedChange={(checked) => {
                                // Stan lokalny aktualizowany będzie po sukcesie zapytania
                                if (canEditFinancialFields) {
                                  // Użyj dedykowanego endpointu dla statusu finansowego
                                  apiRequest('PATCH', `/api/orders/${id}/financial-status`, {
                                    invoiceIssued: checked === true
                                  }).then(() => {
                                    // Po sukcesie invalidate wszystkie zapytania o zlecenia, aby zaktualizować zarówno listę jak i szczegóły
                                    queryClient.invalidateQueries({ queryKey: ['/api/orders'] });
                                    // To poniżej zapewni, że wszystkie szczegóły zlecenia będą zaktualizowane
                                    queryClient.invalidateQueries({ queryKey: [`/api/orders/${id}`] });
                                    // Zaktualizuj również pole lokalne (na wszelki wypadek)
                                    setInvoiceIssued(checked === true);
                                  }).catch(error => {
                                    toast({
                                      title: 'Błąd',
                                      description: `Nie udało się zaktualizować statusu faktury: ${error.message || 'Nieznany błąd'}`,
                                      variant: 'destructive',
                                    });
                                  });
                                }
                              }}
                            />
                            <label 
                              htmlFor="invoice-issued-finance"
                              className="text-sm cursor-pointer"
                            >
                              {invoiceIssued ? 'Wystawiona' : 'Oznacz jako wystawioną'}
                            </label>
                          </div>
                        ) : (
                          <Badge variant={order.invoiceIssued ? 'success' : 'warning'}>
                            {order.invoiceIssued ? 'Wystawiona' : 'Oczekuje'}
                          </Badge>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex flex-col p-4 bg-gray-50 rounded-md border border-gray-200">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center">
                          <FileText className="h-5 w-5 mr-2 text-gray-400" />
                          <span className="font-medium">Rozliczenie w miesiącu</span>
                        </div>
                        
                        {canEditSettlementStatus ? (
                          <div className="flex items-center gap-2">
                            <Checkbox 
                              id="will-be-settled-finance" 
                              checked={willBeSettled}
                              onCheckedChange={(checked) => {
                                const newValue = checked === true;
                                
                                // Użyj dedykowanego endpointu dla firm jednoosobowych, które nie mają uprawnień do pełnej edycji finansowej
                                if (isOnePersonCompany && !canEditFinancialFields) {
                                  // Specjalny endpoint dla firm jednoosobowych
                                  apiRequest('PATCH', `/api/orders/${id}/settlement-status`, {
                                    value: newValue
                                  }).then(() => {
                                    // Po sukcesie invalidate wszystkie zapytania o zlecenia
                                    queryClient.invalidateQueries({ queryKey: ['/api/orders'] });
                                    queryClient.invalidateQueries({ queryKey: [`/api/orders/${id}`] });
                                    setWillBeSettled(newValue);
                                    
                                    toast({
                                      title: 'Status zaktualizowany',
                                      description: newValue ? 'Zlecenie oznaczone jako "do rozliczenia"' : 'Oznaczenie "do rozliczenia" usunięte',
                                    });
                                  }).catch(error => {
                                    toast({
                                      title: 'Błąd',
                                      description: `Nie udało się zaktualizować statusu rozliczenia: ${error.message || 'Nieznany błąd'}`,
                                      variant: 'destructive',
                                    });
                                  });
                                } else if (canEditFinancialFields) {
                                  // Standardowy endpoint dla użytkowników z pełnymi uprawnieniami finansowymi
                                  apiRequest('PATCH', `/api/orders/${id}/financial-status`, {
                                    willBeSettled: newValue
                                  }).then(() => {
                                    // Po sukcesie invalidate wszystkie zapytania o zlecenia
                                    queryClient.invalidateQueries({ queryKey: ['/api/orders'] });
                                    queryClient.invalidateQueries({ queryKey: [`/api/orders/${id}`] });
                                    setWillBeSettled(newValue);
                                  }).catch(error => {
                                    toast({
                                      title: 'Błąd',
                                      description: `Nie udało się zaktualizować statusu rozliczenia: ${error.message || 'Nieznany błąd'}`,
                                      variant: 'destructive',
                                    });
                                  });
                                }
                              }}
                            />
                            <label 
                              htmlFor="will-be-settled-finance"
                              className="text-sm cursor-pointer"
                            >
                              {willBeSettled ? 'Do rozliczenia' : 'Oznacz do rozliczenia'}
                            </label>
                          </div>
                        ) : (
                          <Badge variant={order.willBeSettled ? 'success' : 'warning'}>
                            {order.willBeSettled ? 'Tak' : 'Nie'}
                          </Badge>
                        )}
                      </div>
                    </div>
                  
                    <div className="flex flex-col p-4 bg-gray-50 rounded-md border border-gray-200">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center">
                          <ClipboardList className="h-5 w-5 mr-2 text-gray-400" />
                          <span className="font-medium">Dokumenty montażu</span>
                        </div>
                        
                        {canEditDocuments ? (
                          <div className="flex items-center gap-2">
                            <Checkbox 
                              id="documents-provided-finance" 
                              checked={documentsProvided}
                              onCheckedChange={(checked) => {
                                // Stan lokalny aktualizowany będzie po zakończeniu operacji
                                if (canEditDocuments) {
                                  // Użyj endpointu statusu dla dokumentów (pozostawione jako status, bo obsługuje pole documentsProvided)
                                  updateStatusMutation.mutate({
                                    installationStatus: (status || order.installationStatus || 'Nowe'),
                                    transportStatus: order.transportStatus,
                                    documentsProvided: checked === true
                                  }, {
                                    onSuccess: () => {
                                      // Dodatkowo invalidate wszystkie zapytania o zlecenia, aby zaktualizować zarówno listę jak i szczegóły
                                      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });
                                      queryClient.invalidateQueries({ queryKey: [`/api/orders/${id}`] });
                                      // Zaktualizuj lokalnie
                                      setDocumentsProvided(checked === true);
                                    }
                                  });
                                }
                              }}
                            />
                            <label 
                              htmlFor="documents-provided-finance"
                              className="text-sm cursor-pointer"
                            >
                              {documentsProvided ? 'Wystawione' : 'Oznacz jako wystawione'}
                            </label>
                          </div>
                        ) : (
                          <Badge variant={order.documentsProvided ? 'success' : 'warning'}>
                            {order.documentsProvided ? 'Wystawione' : 'Oczekują'}
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </TabsContent>
          )}
          
          {/* Complaint Tab */}
          <TabsContent value="complaint" className="mt-0">
            <div className="space-y-6">
              {(order.status || '') === 'reklamacja' ? (
                <div className="bg-red-50 rounded-md p-4 border border-red-200">
                  <div className="flex items-center mb-2">
                    <AlertTriangle className="h-5 w-5 text-red-600 mr-2" />
                    <h3 className="font-medium text-red-700">Informacje o reklamacji</h3>
                  </div>
                  {order.complaintNotes ? (
                    <p className="text-gray-700 whitespace-pre-line">{order.complaintNotes}</p>
                  ) : (
                    <p className="text-gray-500 italic">Brak informacji o reklamacji</p>
                  )}
                  
                  {/* Wyświetlanie zdjęć reklamacji */}
                  {order.complaintPhotos && Array.isArray(order.complaintPhotos) && order.complaintPhotos.length > 0 && (
                    <div className="mt-6">
                      <h4 className="text-sm font-medium text-gray-700 mb-3">Zdjęcia reklamacji</h4>
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                        {order.complaintPhotos.map((photo: string, index: number) => (
                          <div key={index} className="relative group">
                            <a href={photo} target="_blank" rel="noopener noreferrer" className="block">
                              <img 
                                src={photo} 
                                alt={`Zdjęcie reklamacji ${index + 1}`} 
                                className="h-24 w-full object-cover rounded-md border border-gray-200"
                              />
                            </a>
                            <div className="absolute top-1 right-1 flex space-x-1">
                              {/* Przycisk pobierania */}
                              <a
                                href={photo}
                                download={`zdjecie_reklamacji_${index + 1}.jpg`}
                                className="p-1 bg-white rounded-full shadow-sm opacity-0 group-hover:opacity-100 transition-opacity"
                                title="Pobierz zdjęcie"
                              >
                                <Download className="h-4 w-4 text-blue-500" />
                              </a>
                              
                              {/* Przycisk usuwania */}
                              {canAddComplaint && (
                                <button
                                  type="button"
                                  onClick={() => {
                                    if (window.confirm('Czy na pewno chcesz usunąć to zdjęcie? Ta operacja jest nieodwracalna.')) {
                                      deletePhotoMutation.mutate(photo);
                                    }
                                  }}
                                  className="p-1 bg-white rounded-full shadow-sm opacity-0 group-hover:opacity-100 transition-opacity"
                                  title="Usuń zdjęcie"
                                >
                                  <Trash2 className="h-4 w-4 text-red-500" />
                                </button>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Dodawanie dodatkowych zdjęć do istniejącej reklamacji */}
                  {canAddComplaint && (
                    <div className="mt-6">
                      <h4 className="text-sm font-medium text-gray-700 mb-2">Dodaj więcej zdjęć reklamacji</h4>
                      
                      <input
                        type="file"
                        ref={fileInputRef}
                        onChange={handleFileChange}
                        accept="image/*"
                        multiple
                        className="hidden"
                        capture="environment"
                      />
                      
                      <div 
                        className="mt-1 flex justify-center px-6 py-4 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50"
                        onClick={triggerFileInput}
                        onDragOver={handleDragOver}
                        onDrop={handleDrop}
                      >
                        <div className="space-y-1 text-center">
                          <Camera className="mx-auto h-8 w-8 text-gray-400" />
                          <div className="text-sm text-gray-600">
                            <span className="font-medium text-primary-600 hover:text-primary-500">
                              Dodaj zdjęcia
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Podgląd wybranych plików */}
                      {selectedFiles.length > 0 && (
                        <div className="mt-4">
                          <h4 className="text-sm font-medium text-gray-700 mb-2">Wybrane zdjęcia</h4>
                          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            {selectedFiles.map((file, index) => (
                              <div key={index} className="relative group">
                                <img 
                                  src={URL.createObjectURL(file)} 
                                  alt={`Selected file ${index + 1}`} 
                                  className="h-24 w-full object-cover rounded-md"
                                />
                                <button
                                  type="button"
                                  onClick={() => handleRemoveSelectedFile(index)}
                                  className="absolute top-1 right-1 p-1 bg-white rounded-full shadow-sm opacity-80 hover:opacity-100"
                                >
                                  <X className="h-4 w-4 text-gray-600" />
                                </button>
                              </div>
                            ))}
                          </div>
                          <div className="mt-4">
                            <Button 
                              variant="outline" 
                              onClick={handleFileUpload}
                              disabled={uploadingPhotos}
                            >
                              {uploadingPhotos ? (
                                <div className="flex items-center">
                                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                  Przesyłanie...
                                </div>
                              ) : (
                                <>
                                  <Upload className="h-4 w-4 mr-2" />
                                  Prześlij zdjęcia
                                </>
                              )}
                            </Button>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ) : (
                <div className="bg-gray-50 rounded-md p-4 border border-gray-200">
                  <div className="flex items-center mb-4">
                    <ClipboardList className="h-5 w-5 text-gray-600 mr-2" />
                    <h3 className="font-medium text-gray-700">Zarządzanie reklamacjami</h3>
                  </div>
                  
                  <p className="text-gray-600 mb-4">
                    Obecnie nie zgłoszono reklamacji dla tego zlecenia. Jeśli wystąpiły problemy z montażem lub klient zgłasza uwagi, możesz utworzyć reklamację.
                  </p>
                  
                  {canAddComplaint && (
                    <div className="mt-6">
                      <h4 className="font-medium text-sm text-gray-700 mb-2">Zgłoś reklamację:</h4>
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Opis reklamacji
                          </label>
                          <Textarea 
                            placeholder="Opisz szczegóły reklamacji..."
                            value={complaintNotes}
                            onChange={(e) => setComplaintNotes(e.target.value)}
                            className="w-full"
                            rows={4}
                          />
                        </div>
                        
                        <Button 
                          onClick={() => {
                            if (!complaintNotes) {
                              toast({
                                title: "Błąd",
                                description: "Opis reklamacji jest wymagany",
                                variant: "destructive"
                              });
                              return;
                            }
                            
                            // Dla reklamacji również musimy uwzględnić transportStatus
                            updateStatusMutation.mutate({
                              installationStatus: 'Reklamacja',
                              transportStatus: order.transportStatus as any,
                              complaintNotes
                            });
                          }}
                          variant="destructive"
                          disabled={updateStatusMutation.isPending || !complaintNotes}
                        >
                          {updateStatusMutation.isPending ? (
                            <div className="flex items-center">
                              <div className="w-4 h-4 border-t-2 border-white rounded-full animate-spin mr-2"></div>
                              Przetwarzanie...
                            </div>
                          ) : (
                            <>
                              <AlertTriangle className="h-4 w-4 mr-2" />
                              Zgłoś reklamację
                            </>
                          )}
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              )}


              
              {/* Historia komentarzy */}
              <div className="border border-gray-200 rounded-md overflow-hidden">
                <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
                  <h4 className="font-medium">Historia komentarzy</h4>
                </div>
                <div className="divide-y divide-gray-200">
                  {order.notes ? (
                    <div className="p-4">
                      <p className="text-gray-700 whitespace-pre-line">{order.notes}</p>
                    </div>
                  ) : (
                    <div className="p-4">
                      <p className="text-gray-500 italic">Brak komentarzy</p>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Dodawanie nowego komentarza */}
              {canEditStatus && (
                <div className="mt-4">
                  <h4 className="font-medium text-sm text-gray-700 mb-2">Dodaj komentarz:</h4>
                  <div className="space-y-4">
                    <Textarea 
                      placeholder="Dodaj komentarz lub aktualizację..."
                      value={comments}
                      onChange={(e) => setComments(e.target.value)}
                      className="w-full"
                      rows={3}
                    />
                    
                    {comments && (
                      <Button 
                        onClick={() => {
                          updateStatusMutation.mutate({
                            installationStatus: (order.installationStatus || 'Nowe'),
                            transportStatus: order.transportStatus as any,
                            comments
                          });
                        }}
                        disabled={updateStatusMutation.isPending || !comments}
                      >
                        {updateStatusMutation.isPending ? (
                          <div className="flex items-center">
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Zapisywanie...
                          </div>
                        ) : (
                          <div className="flex items-center">
                            <MessageCircle className="h-4 w-4 mr-2" />
                            Dodaj komentarz
                          </div>
                        )}
                      </Button>
                    )}
                  </div>
                </div>
              )}
            </div>
          </TabsContent>
        </CardContent>
      </Tabs>
